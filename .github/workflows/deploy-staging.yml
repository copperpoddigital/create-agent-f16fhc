name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Backend CI", "Web CI"]
    branches: [staging]
    types: [completed]
  workflow_dispatch:
    description: Manual trigger for staging deployment

env:
  TF_WORKING_DIR: infrastructure/terraform/aws
  TF_VAR_FILE: environments/staging.tfvars
  AWS_REGION: us-west-2
  ENVIRONMENT: staging
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  BACKEND_IMAGE: freight-price-movement-agent/backend
  WEB_IMAGE: freight-price-movement-agent/web

jobs:
  check-workflow-status:
    name: Check Workflow Status
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Success
        run: echo 'Prerequisite workflow succeeded, proceeding with deployment'
    outputs:
      proceed: 'true'

  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: check-workflow-status
    runs-on: ubuntu-latest
    if: ${{ needs.check-workflow-status.outputs.proceed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.x'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -var-file=${{ env.TF_VAR_FILE }} -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Extract Infrastructure Outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform output -json > tf-outputs.json

      - name: Upload Terraform Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs
          path: ${{ env.TF_WORKING_DIR }}/tf-outputs.json

  deploy-backend:
    name: Deploy Backend
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set deployment variables
        run: echo "ECS_CLUSTER=$(jq -r .ecs_cluster_name.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_BLUE=$(jq -r .backend_target_group_blue.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_GREEN=$(jq -r .backend_target_group_green.value tf-outputs.json)" >> $GITHUB_ENV && echo "LISTENER_ARN=$(jq -r .backend_listener_arn.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine current active target group
        run: CURRENT_TARGET_GROUP=$(aws elbv2 describe-target-groups --names $TARGET_GROUP_BLUE $TARGET_GROUP_GREEN --query 'TargetGroups[?LoadBalancerArns!=`[]`].TargetGroupName' --output text) && echo "CURRENT_TARGET_GROUP=$CURRENT_TARGET_GROUP" >> $GITHUB_ENV && if [ "$CURRENT_TARGET_GROUP" == "$TARGET_GROUP_BLUE" ]; then echo "NEW_TARGET_GROUP=$TARGET_GROUP_GREEN" >> $GITHUB_ENV; else echo "NEW_TARGET_GROUP=$TARGET_GROUP_BLUE" >> $GITHUB_ENV; fi

      - name: Deploy to new target group
        run: aws ecs update-service --cluster $ECS_CLUSTER --service backend-service --task-definition backend-task --load-balancers targetGroupArn=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),containerName=backend,containerPort=8000

      - name: Wait for service to stabilize
        run: aws ecs wait services-stable --cluster $ECS_CLUSTER --services backend-service

      - name: Run health checks on new deployment
        run: NEW_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && HEALTH_COUNT=$(aws elbv2 describe-target-health --target-group-arn $NEW_TARGET_GROUP_ARN --query 'length(TargetHealthDescriptions[?TargetHealth.State==`healthy`])') && if [ $HEALTH_COUNT -lt 1 ]; then echo 'No healthy targets found in new target group' && exit 1; fi

      - name: Switch traffic to new target group
        run: NEW_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && aws elbv2 modify-listener --listener-arn $LISTENER_ARN --default-actions Type=forward,TargetGroupArn=$NEW_TARGET_GROUP_ARN

  deploy-web:
    name: Deploy Web
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set deployment variables
        run: echo "ECS_CLUSTER=$(jq -r .ecs_cluster_name.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_BLUE=$(jq -r .web_target_group_blue.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_GREEN=$(jq -r .web_target_group_green.value tf-outputs.json)" >> $GITHUB_ENV && echo "LISTENER_ARN=$(jq -r .web_listener_arn.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine current active target group
        run: CURRENT_TARGET_GROUP=$(aws elbv2 describe-target-groups --names $TARGET_GROUP_BLUE $TARGET_GROUP_GREEN --query 'TargetGroups[?LoadBalancerArns!=`[]`].TargetGroupName' --output text) && echo "CURRENT_TARGET_GROUP=$CURRENT_TARGET_GROUP" >> $GITHUB_ENV && if [ "$CURRENT_TARGET_GROUP" == "$TARGET_GROUP_BLUE" ]; then echo "NEW_TARGET_GROUP=$TARGET_GROUP_GREEN" >> $GITHUB_ENV; else echo "NEW_TARGET_GROUP=$TARGET_GROUP_BLUE" >> $GITHUB_ENV; fi

      - name: Deploy to new target group
        run: aws ecs update-service --cluster $ECS_CLUSTER --service web-service --task-definition web-task --load-balancers targetGroupArn=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text),containerName=web,containerPort=80

      - name: Wait for service to stabilize
        run: aws ecs wait services-stable --cluster $ECS_CLUSTER --services web-service

      - name: Run health checks on new deployment
        run: NEW_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && HEALTH_COUNT=$(aws elbv2 describe-target-health --target-group-arn $NEW_TARGET_GROUP_ARN --query 'length(TargetHealthDescriptions[?TargetHealth.State==`healthy`])') && if [ $HEALTH_COUNT -lt 1 ]; then echo 'No healthy targets found in new target group' && exit 1; fi

      - name: Switch traffic to new target group
        run: NEW_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $NEW_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && aws elbv2 modify-listener --listener-arn $LISTENER_ARN --default-actions Type=forward,TargetGroupArn=$NEW_TARGET_GROUP_ARN

  run-integration-tests:
    name: Run Integration Tests
    needs: [deploy-backend, deploy-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set API endpoint variable
        run: echo "API_ENDPOINT=$(jq -r .api_endpoint.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Install dependencies
        run: cd src/backend && pip install -r requirements.txt

      - name: Run integration tests
        run: cd src/backend && python -m pytest tests/integration -v

  run-e2e-tests:
    name: Run E2E Tests
    needs: [deploy-backend, deploy-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set web endpoint variable
        run: echo "WEB_ENDPOINT=$(jq -r .web_endpoint.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Install dependencies
        run: cd src/web && npm install

      - name: Run E2E tests
        run: cd src/web && npm run test:e2e:staging

  run-performance-tests:
    name: Run Performance Tests
    needs: [deploy-backend, deploy-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JMeter
        run: sudo apt-get update && sudo apt-get install -y openjdk-11-jdk && wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.tgz && tar -xzf apache-jmeter-5.5.tgz

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set API endpoint variable
        run: echo "API_ENDPOINT=$(jq -r .api_endpoint.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Run API load tests
        run: cd src/backend/tests/performance && ../../../apache-jmeter-5.5/bin/jmeter -n -t api_load_test.jmx -Jhost=$API_ENDPOINT -l results.jtl -e -o report

      - name: Check performance test results
        run: cd src/backend/tests/performance && python check_performance_results.py results.jtl --environment staging

      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: src/backend/tests/performance/report

  post-deployment-notification:
    name: Post Deployment Notification
    needs: [run-integration-tests, run-e2e-tests, run-performance-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Send success notification
        if: success()
        run: curl -X POST -H 'Content-type: application/json' --data '{"text":"✅ Freight Price Movement Agent successfully deployed to staging environment"}' ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send failure notification
        if: failure()
        run: curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Freight Price Movement Agent deployment to staging environment failed"}' ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    needs: [deploy-backend, deploy-web, run-integration-tests, run-e2e-tests, run-performance-tests]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs
          path: .

      - name: Set deployment variables
        run: echo "ECS_CLUSTER=$(jq -r .ecs_cluster_name.value tf-outputs.json)" >> $GITHUB_ENV && echo "BACKEND_LISTENER_ARN=$(jq -r .backend_listener_arn.value tf-outputs.json)" >> $GITHUB_ENV && echo "WEB_LISTENER_ARN=$(jq -r .web_listener_arn.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_BLUE=$(jq -r .backend_target_group_blue.value tf-outputs.json)" >> $GITHUB_ENV && echo "TARGET_GROUP_GREEN=$(jq -r .backend_target_group_green.value tf-outputs.json)" >> $GITHUB_ENV && echo "WEB_TARGET_GROUP_BLUE=$(jq -r .web_target_group_blue.value tf-outputs.json)" >> $GITHUB_ENV && echo "WEB_TARGET_GROUP_GREEN=$(jq -r .web_target_group_green.value tf-outputs.json)" >> $GITHUB_ENV

      - name: Determine current backend target group
        run: CURRENT_TARGET_GROUP=$(aws elbv2 describe-target-groups --names $TARGET_GROUP_BLUE $TARGET_GROUP_GREEN --query 'TargetGroups[?LoadBalancerArns!=`[]`].TargetGroupName' --output text) && echo "CURRENT_TARGET_GROUP=$CURRENT_TARGET_GROUP" >> $GITHUB_ENV && if [ "$CURRENT_TARGET_GROUP" == "$TARGET_GROUP_BLUE" ]; then echo "ROLLBACK_TARGET_GROUP=$TARGET_GROUP_GREEN" >> $GITHUB_ENV; else echo "ROLLBACK_TARGET_GROUP=$TARGET_GROUP_BLUE" >> $GITHUB_ENV; fi

      - name: Determine current web target group
        run: CURRENT_WEB_TARGET_GROUP=$(aws elbv2 describe-target-groups --names $WEB_TARGET_GROUP_BLUE $WEB_TARGET_GROUP_GREEN --query 'TargetGroups[?LoadBalancerArns!=`[]`].TargetGroupName' --output text) && echo "CURRENT_WEB_TARGET_GROUP=$CURRENT_WEB_TARGET_GROUP" >> $GITHUB_ENV && if [ "$CURRENT_WEB_TARGET_GROUP" == "$WEB_TARGET_GROUP_BLUE" ]; then echo "ROLLBACK_WEB_TARGET_GROUP=$WEB_TARGET_GROUP_GREEN" >> $GITHUB_ENV; else echo "ROLLBACK_WEB_TARGET_GROUP=$WEB_TARGET_GROUP_BLUE" >> $GITHUB_ENV; fi

      - name: Rollback backend deployment
        run: ROLLBACK_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $ROLLBACK_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && aws elbv2 modify-listener --listener-arn $BACKEND_LISTENER_ARN --default-actions Type=forward,TargetGroupArn=$ROLLBACK_TARGET_GROUP_ARN

      - name: Rollback web deployment
        run: ROLLBACK_WEB_TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names $ROLLBACK_WEB_TARGET_GROUP --query 'TargetGroups[0].TargetGroupArn' --output text) && aws elbv2 modify-listener --listener-arn $WEB_LISTENER_ARN --default-actions Type=forward,TargetGroupArn=$ROLLBACK_WEB_TARGET_GROUP_ARN

      - name: Wait for services to stabilize
        run: aws ecs wait services-stable --cluster $ECS_CLUSTER --services backend-service web-service

      - name: Send rollback notification
        run: curl -X POST -H 'Content-type: application/json' --data '{"text":"⚠️ Deployment to staging environment failed - rollback completed"}' ${{ secrets.SLACK_WEBHOOK_URL }}
name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.9'
  WORKING_DIRECTORY: 'src/backend'
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'postgres'
  POSTGRES_DB: 'test_db'
  POSTGRES_HOST: 'localhost'
  POSTGRES_PORT: '5432'
  REDIS_HOST: 'localhost'
  REDIS_PORT: '6379'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install -r requirements.txt

      - name: Run flake8
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: flake8 .

      - name: Run black check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: black --check .

      - name: Run isort check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: isort --check-only --profile black .

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install -r requirements.txt

      - name: Run mypy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: mypy .

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install -r requirements.txt

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://${{ env.REDIS_HOST }}:${{ env.REDIS_PORT }}/0
          TESTING: 'True'
          SECRET_KEY: 'test_secret_key'
          ENVIRONMENT: 'test'
        run: pytest tests/test_utils tests/test_models --cov=. --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.WORKING_DIRECTORY }}/coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install -r requirements.txt

      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}
          REDIS_URL: redis://${{ env.REDIS_HOST }}:${{ env.REDIS_PORT }}/0
          TESTING: 'True'
          SECRET_KEY: 'test_secret_key'
          ENVIRONMENT: 'test'
        run: pytest tests/test_api tests/test_services --cov=. --cov-report=xml --cov-append

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-integration
          path: ${{ env.WORKING_DIRECTORY }}/coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/requirements.txt'

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pip install bandit safety

      - name: Run bandit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: bandit -r . -x ./tests

      - name: Run safety check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: safety check -r requirements.txt

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, type-check]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          file: ${{ env.WORKING_DIRECTORY }}/Dockerfile
          push: false
          tags: freight-price-movement-agent-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: freight-price-movement-agent-backend:latest
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif